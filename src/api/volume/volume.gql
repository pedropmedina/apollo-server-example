type Volume {
	id: String!
	etag: String
	safeLink: String
	volumeInfo: VolumeInfo!
	saleInfo: SaleInfo
}

type VolumeInfo {
	title: String!
	subtitle: String
	authors: [String]!
	publisher: String!
	publishedDate: String!
	description: String!
	pageCount: Int!
	categories: [String]!
	averageRating: Float
	ratingsCount: Int
	industryIdentifiers: [IndustryIdentifiers]
	maturityRating: String!
	imageLinks: ImageLinks!
}

# properties small through extraLarge only
# available when getting volume by id
type ImageLinks {
	smallThumbnail: String
	thumbnail: String
	small: String
	medium: String
	large: String
	extraLarge: String
	previewLink: String
	infoLink: String
	canonicalVolumeLink: String
}

type IndustryIdentifiers {
	type: String
	identifier: String
}

type SaleInfo {
	country: String
	saleability: String
	isEbook: String
	listPrice: Price
	retailPrice: Price
	buyLink: String
}

type Price {
	amount: Float
	currencyCode: String
}

input VolumeInput {
	shelf: Int
	volumeId: String
}

extend type Query {
	getVolumes(shelf: Int!): [Volume]!
	getVolume(id: ID!): Volume!
	searchVolume(query: String!): [Volume]!
	recommendedVolumes: [Volume]!
}

type Mutation {
	addVolume(input: VolumeInput): String
	removeVolume(input: VolumeInput): String
}
